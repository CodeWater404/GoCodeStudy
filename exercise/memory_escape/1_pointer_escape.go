package main

/**
  @author: CodeWater
  @since: 2024/1/14
  @desc:
	编译器会根据变量是否被外部引用来决定是否逃逸：
	1、如果函数外部没有引用，则优先放到栈中：
	2、如果函数外部存在引用，则必定放到堆中：
	3、如果栈上放不下，则必定放到堆上
	内存逃逸场景：
		1. 指针逃逸
		2. 栈空间不足
		3. 变量大小不确定
		4. 动态类型变量
		5. 闭包引用对象
	总结：
		1、栈上分配内存比在堆中分配内存效率更高
		2、栈上分配的内存不需要GC处理，而堆需要
		3、逃逸分析目的是决定内分配地址是栈还是堆
		4、逃逸分析在编译阶段完成
		5、只要是指针变量都会在堆上分配，所以对于小变量我们还是使用传值（而不是传指
		针)，效率更高一点
**/

func escape1() *int {
	var a int = 1
	return &a

}

func main() {
	escape1()
	// go build -gcflags=-m 1_pointer_escape.go
}
