#### 缩写
# MD  : MD摘要算法
# DN  : Distinguished Name（特征名称）
# CRL : Certificate Revocation List（证书吊销列表）
# RID : Registered object identification（已注册对象标识）

#第一个section被解释为默认段落，默认段落一般没有[section_name]标识。
#当搜索某一个section时，将首先搜索有名称的section，然后还会搜索默认section，
#如果没有找到匹配的有名称的section，将直接读取默认section。
HOME            = .
RANDFILE        = $ENV::HOME/.rnd      # 随机数种子文件
#oid_file       = $ENV::HOME/.oid      # 定义扩展对象的文件名
oid_section     = new_oids             # 定义扩展对象的字段名，oid是对象标识符
#extensions     = 


[ new_oids ]
#testoid1   = 1.2.3.4
#testoid2   = ${testoid1}.5.6
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7


[ ca ]       #### 证书签发主配置
default_ca       = CA_default



[ CA_default ]
dir              = /etc/pki/CA            # Where everything is kept
certs            = $dir/certs             # Where the issued certs are kept
crl_dir          = $dir/crl               # Where the issued crl are kept
database         = $dir/index.txt         # OpenSSL定义的用于已签发证书的文本数据库文件，初始化时通常时空文件
#unique_subject  = no                     # Set to 'no' to allow creation of
                                          # several ctificates with same subject.
new_certs_dir    = $dir/newcerts          # 存放CA指令签发生成新证书的目录
certificate      = $dir/cacert.pem        # 存放CA证书的文件
private_key      = $dir/private/cakey.pem # 存放CA私钥的文件
serial           = $dir/serial            # The current serial number
crlnumber        = $dir/crlnumber         # the current crl number
                                          # must be commented out to leave a V1 CRL
crl              = $dir/crl.pem           # The current CRL
RANDFILE         = $dir/private/.rand     # 用于读写随机数种子的文件
x509_extensions  = usr_cert               # 指定X.509扩展项定义字段，没有该扩展项生成的时一个v1证书，否则v3
name_opt         = ca_default             # 证书DN域显示方式选项，其可选值同openssl x509 -nameopt
cert_opt         = ca_default             # 证书域显示选项，其可选值同openssl x509 -certopt
copy_extensions = copy                   # 证书请求中的扩展项信息是否加入到证书扩展项中，none-否、copy-没有的复制、copyall-全部复制，存在则替换
#crl_extensions  = crl_ext                # 生成CRL时加入的扩展项定义字段，没提供生成的CRL就是v1版本
default_days     = 365                    # 签发证书的有效天数
default_crl_days = 30                     # 从当前CRL到下次CRL发布以小时为单位的时间间隔
default_md       = sha256                 # 签发证书时采用的信息摘要算法
preserve         = no                     # keep passed DN ordering
policy           = policy_match           # 指定用于证书请求DN域匹配策略的字段


[ policy_match ]  ####### 请求信息匹配策略字段，变量值可能为match、optional、supplied
countryName            = match
stateOrProvinceName    = match
organizationName       = match
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional


[ policy_anything ]
countryName            = optional
stateOrProvinceName    = optional
localityName           = optional
organizationName       = optional
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional


[ usr_cert ]
basicConstraints = CA:FALSE               # CA:TRUE或CA:FALSE,pathlen: n  (n为非负整数，证书路径长度)

# Netscape定义，证书用途：
#   client   用于客户端的证书
#   server   用于服务器的证书
#   email    用于E-mail安全协议的证书
#   objsign  用于签名的证书
#   sslCA    用于签发SSL用户证书的CA证书
#   emailCA  用于签发E-mail用户证书的CA证书
#   objCA    用于签发用户签名证书的CA证书
#   reserved 保留值
#nsCertType      = client, email, objsign

# keyUsage定义证书中的密钥的用途：
#   digitalSignature 用于数字签名的密钥
#   nonRepudiation   用于提供不可否认服务的密钥，一般是第三方公正机构使用的密钥
#   keyEncipherment  用于对其它密钥或相关安全信息进行加密，可用于密钥安全传输
#   dataEncipherment 用于对用户数据进行加密的密钥
#   KeyAgreement     用于商定或建立进一步操作需要的密钥的密钥
#   keyCertSign      用于验证证书签名的密钥，即CA的公钥
#   cRLSign          用于验证CA对CRL签名的密钥
#   encipherOnly     密钥仅用于加密
#   decipherOnly     密钥仅用于解密
#keyUsage        = nonRepudiation, digitalSignature, keyEncipherment

# extendedKeyUsage 扩展密钥扩展项,用户添加的额外密钥应用信息
#   serverAuth      PKIX定义，用于SSL/TLS Web服务器验证
#   clientAuth      PKIX定义，用于SSL/TLS Web客户端验证
#   codeSigning     PKIX定义，用于代码签名
#   emailProtection PKIX定义，用于S/MIME协议E-mail保护
#   timeStamping    PKIX定义，用于可信时间戳
#extendedKeyUsage= critical,timeStamping

nsComment              = "OpenSSL Generated Certificate"
subjectKeyIdentifier   = hash             # 主体密钥标识扩展项，用于在证书主体拥有多个密钥集的时候指定密钥属于哪个密钥集
authorityKeyIdentifier = keyid,issuer     # 验证机构密钥标识扩展项。用于构造证书链的时候标识签发机构的证书和密钥，证书中的验证机构密钥标识分为三个部分：密钥ID（keyID）、验证机构DN和CA证书序列号。

# subjectAltName 主体别名扩展项。为证书提供了形式更加灵活的命名方式，
#   理论上可以包含IP地址、URL、email、DNS域名、RID（已注册对象标识）及IP地址等信息作为主体别名。
#subjectAltName        = email:copy
#subjectAltName        = email:move
#subjectAltName        = email:copy,email:my@OpenSSL.cn,URL:http://www.OpenSSL.cn/

# issuerAltName，颁发者别名扩展项。为颁发者提供了不同形式的命名方式，
#    采用的形式与subjectAltName相似，它支持subjectAltName的所有参数，但是不支持email参数的copy值。
#issuerAltName         = issuer:copy   # 证书颁发者主体别名中所有别名都会被复制到新签发证书的颁发者别名扩展项中

#authorityInfoAccess，验证机构信息处理扩展项。给出了如何处理跟CA相关的信息的详细细节
#crlDistributionPoints，CRL分布点扩展项。用于指明用户为了验证证书吊销状态而需要查找CRL（证书吊销列表）信息的发布站点。
#certificatePolicies，证书策略扩展项。定义证书应用策略，比如证书验证策略。
#nsBaseUrl                                            # Netscape定义，基本URL
#nsRevocationUrl                                      # Netscape定义，吊销URL
#nsRenewalUrl                                         # Netscape定义，更新URL
#nsCaRevocationUrl = http://www.domain.dom/ca-crl.pem # Netscape定义，CA吊销URL
#nsCaPolicyUrl                                        # Netscape定义，CA策略URL
#nsSslServerName                                      # Netscape定义，SSL服务器名称


[ crl_ext ]
#issuerAltName         = issuer:copy
authorityKeyIdentifier = keyid:always


[ proxy_cert_ext ]
basicConstraints = CA:FALSE
# nsCertType     = server
# nsCertType     = objsign
# nsCertType     = client, email
# nsCertType     = client, email, objsign
# keyUsage       = nonRepudiation, digitalSignature, keyEncipherment
nsComment        = "OpenSSL Generated Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
# subjectAltName       = email:copy
# subjectAltName       = email:move
# issuerAltName        = issuer:copy
#nsCaRevocationUrl     = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName
proxyCertInfo          = critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo


[ req ]   ####### 证书请求主配置字段默认值
default_bits       = 2048                   # 生成的证书中密钥对的长度
default_md         = sha256                 # 定义签名使用的信息摘要算法，默认md5
default_keyfile    = privkey.pem            # 生成密钥的输出保存文件
distinguished_name = req_distinguished_name # 定义输入用户信息选项的"特征名称"字段名
attributes         = req_attributes         # 定义证书请求属性的字段名
x509_extensions    = v3_ca                  # 指定生成自签名证书时要使用的证书扩展项字段，改字段定义了一系列要加入到证书中的扩展项
#input_password    = secret                 # 当前读取输入私钥文件时候的口令
#output_password   = secret                 # 保存输出私钥文件的口令
# string_mask 为一些字段指定特定字符串类型，比如证书请求中的城市和组织名称等字段就可以使用
# 这样的方法指定，这使得证书可以支持如行字这样的多字节字符。
#   default  : 定义了PrintableString, T61String, BMPString三种类型字符串，默认值
#   pkix     : 定义了PrintableString, BMPString 二种类型字符串(PKIX recommendation before 2004)
#   utf8only : 只使用UTF8Strings类型(PKIX recommendation after 2004).
#   nombstr  : 仅使用PrintableString, T61String 二种类型字符串
string_mask        = utf8only
req_extensions    = v3_req                 # 指定证书请求扩展字段名，这个字段定义了要加入到证书请求中的一系列扩展项


[ req_distinguished_name ] ####### 生成证书请求文件时的显示内容和限制要求
countryName                  = Country Name (2 letter code)       # 国家
countryName_default          = XX
countryName_min              = 2
countryName_max              = 2
stateOrProvinceName          = State or Province Name (full name) # 省份
#stateOrProvinceName_default = Default Province
localityName                 = Locality Name (eg, city)           # 城市
localityName_default         = Default City
0.organizationName           = Organization Name (eg, company)    # 组织
0.organizationName_default   = Default Company Ltd
#1.organizationName          = Second Organization Name (eg, company)
#1.organizationName_default  = World Wide Web Pty Ltd
organizationalUnitName       = Organizational Unit Name (eg, section) # 组织名称
#organizationalUnitName_default =
commonName                   = Common Name (eg, your name or your server\'s hostname)
commonName_max               = 64
emailAddress                 = Email Address
emailAddress_max             = 64
#SET-ex3                     = SET extension number 3


[ req_attributes ]
challengePassword     = A challenge password
challengePassword_min = 4
challengePassword_max = 20
unstructuredName      = An optional company name


[ v3_req ]           ###### 证书请求扩展字段
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = CA:FALSE
#keyUsage              = nonRepudiation, digitalSignature, keyEncipherment 
keyUsage               = digitalSignature, keyEncipherment
extendedKeyUsage       = serverAuth, clientAuth
subjectAltName         = @alt_names


[alt_names]
DNS.1 = *.codewater.com



[ v3_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = critical,CA:true,pathlen:0
keyUsage               = digitalSignature, cRLSign, keyCertSign
extendedKeyUsage       = serverAuth, clientAuth
# nsCertType           = sslCA, emailCA
# subjectAltName       = email:copy
# issuerAltName        = issuer:copy
# obj                  = DER:02:03
# basicConstraints     = critical, DER:30:03:01:01:FF


[ tsa ]
default_tsa    = tsa_config1


[ tsa_config1 ]
dir            = ./demoCA
serial         = $dir/tsaserial
crypto_device  = builtin
signer_cert    = $dir/tsacert.pem
certs          = $dir/cacert.pem
signer_key     = $dir/private/tsakey.pem
default_policy = tsa_policy1
other_policies = tsa_policy2, tsa_policy3                # acceptable policies (optional)
    digests        = sha1, sha256, sha384, sha512            # Acceptable message digests (mandatory)
    accuracy       = secs:1, millisecs:500, microsecs:100    # (optional)
    clock_precision_digits = 0      # number of digits after dot. (optional)
    ordering               = yes    # Is ordering defined for timestamps?
    tsa_name               = yes    # Must the TSA name be included in the reply?(optional, default: no)
    ess_cert_id_chain      = no     # Must the ESS cert id chain be included?(optional, default: no)



