// 这个就是protobuf的中间文件

// 指定的当前proto语法的版本，有2和3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: product.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_GetProductStock_FullMethodName             = "/ProductService/GetProductStock"
	ProductService_UpdateProductClientStream_FullMethodName   = "/ProductService/UpdateProductClientStream"
	ProductService_GetProductStockServerStream_FullMethodName = "/ProductService/GetProductStockServerStream"
	ProductService_SayHelloStream_FullMethodName              = "/ProductService/SayHelloStream"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// 定义方法（普通）
	GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// 客户端流式 RPC
	UpdateProductClientStream(ctx context.Context, opts ...grpc.CallOption) (ProductService_UpdateProductClientStreamClient, error)
	// 服务器端流式 RPC
	GetProductStockServerStream(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProductService_GetProductStockServerStreamClient, error)
	// 双向流式 RPC
	SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ProductService_SayHelloStreamClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProductClientStream(ctx context.Context, opts ...grpc.CallOption) (ProductService_UpdateProductClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], ProductService_UpdateProductClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceUpdateProductClientStreamClient{stream}
	return x, nil
}

type ProductService_UpdateProductClientStreamClient interface {
	Send(*ProductRequest) error
	CloseAndRecv() (*ProductResponse, error)
	grpc.ClientStream
}

type productServiceUpdateProductClientStreamClient struct {
	grpc.ClientStream
}

func (x *productServiceUpdateProductClientStreamClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceUpdateProductClientStreamClient) CloseAndRecv() (*ProductResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) GetProductStockServerStream(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProductService_GetProductStockServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], ProductService_GetProductStockServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetProductStockServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_GetProductStockServerStreamClient interface {
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type productServiceGetProductStockServerStreamClient struct {
	grpc.ClientStream
}

func (x *productServiceGetProductStockServerStreamClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ProductService_SayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[2], ProductService_SayHelloStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceSayHelloStreamClient{stream}
	return x, nil
}

type ProductService_SayHelloStreamClient interface {
	Send(*ProductRequest) error
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type productServiceSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *productServiceSayHelloStreamClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceSayHelloStreamClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// 定义方法（普通）
	GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error)
	// 客户端流式 RPC
	UpdateProductClientStream(ProductService_UpdateProductClientStreamServer) error
	// 服务器端流式 RPC
	GetProductStockServerStream(*ProductRequest, ProductService_GetProductStockServerStreamServer) error
	// 双向流式 RPC
	SayHelloStream(ProductService_SayHelloStreamServer) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStock not implemented")
}
func (UnimplementedProductServiceServer) UpdateProductClientStream(ProductService_UpdateProductClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProductClientStream not implemented")
}
func (UnimplementedProductServiceServer) GetProductStockServerStream(*ProductRequest, ProductService_GetProductStockServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProductStockServerStream not implemented")
}
func (UnimplementedProductServiceServer) SayHelloStream(ProductService_SayHelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStream not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProductClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).UpdateProductClientStream(&productServiceUpdateProductClientStreamServer{stream})
}

type ProductService_UpdateProductClientStreamServer interface {
	SendAndClose(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type productServiceUpdateProductClientStreamServer struct {
	grpc.ServerStream
}

func (x *productServiceUpdateProductClientStreamServer) SendAndClose(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceUpdateProductClientStreamServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProductService_GetProductStockServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetProductStockServerStream(m, &productServiceGetProductStockServerStreamServer{stream})
}

type ProductService_GetProductStockServerStreamServer interface {
	Send(*ProductResponse) error
	grpc.ServerStream
}

type productServiceGetProductStockServerStreamServer struct {
	grpc.ServerStream
}

func (x *productServiceGetProductStockServerStreamServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).SayHelloStream(&productServiceSayHelloStreamServer{stream})
}

type ProductService_SayHelloStreamServer interface {
	Send(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type productServiceSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *productServiceSayHelloStreamServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceSayHelloStreamServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductStock",
			Handler:    _ProductService_GetProductStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateProductClientStream",
			Handler:       _ProductService_UpdateProductClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetProductStockServerStream",
			Handler:       _ProductService_GetProductStockServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloStream",
			Handler:       _ProductService_SayHelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "product.proto",
}
